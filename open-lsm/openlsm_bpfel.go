// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || loong64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openlsmEvent struct{ FileName [100]uint8 }

// loadOpenlsm returns the embedded CollectionSpec for openlsm.
func loadOpenlsm() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpenlsmBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openlsm: %w", err)
	}

	return spec, err
}

// loadOpenlsmObjects loads openlsm and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openlsmObjects
//	*openlsmPrograms
//	*openlsmMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenlsmObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenlsm()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openlsmSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openlsmSpecs struct {
	openlsmProgramSpecs
	openlsmMapSpecs
}

// openlsmSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openlsmProgramSpecs struct {
	FileOpen *ebpf.ProgramSpec `ebpf:"file_open"`
}

// openlsmMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openlsmMapSpecs struct {
	ArgMap   *ebpf.MapSpec `ebpf:"arg_map"`
	Ringbuff *ebpf.MapSpec `ebpf:"ringbuff"`
}

// openlsmObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenlsmObjects or ebpf.CollectionSpec.LoadAndAssign.
type openlsmObjects struct {
	openlsmPrograms
	openlsmMaps
}

func (o *openlsmObjects) Close() error {
	return _OpenlsmClose(
		&o.openlsmPrograms,
		&o.openlsmMaps,
	)
}

// openlsmMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenlsmObjects or ebpf.CollectionSpec.LoadAndAssign.
type openlsmMaps struct {
	ArgMap   *ebpf.Map `ebpf:"arg_map"`
	Ringbuff *ebpf.Map `ebpf:"ringbuff"`
}

func (m *openlsmMaps) Close() error {
	return _OpenlsmClose(
		m.ArgMap,
		m.Ringbuff,
	)
}

// openlsmPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenlsmObjects or ebpf.CollectionSpec.LoadAndAssign.
type openlsmPrograms struct {
	FileOpen *ebpf.Program `ebpf:"file_open"`
}

func (p *openlsmPrograms) Close() error {
	return _OpenlsmClose(
		p.FileOpen,
	)
}

func _OpenlsmClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openlsm_bpfel.o
var _OpenlsmBytes []byte
